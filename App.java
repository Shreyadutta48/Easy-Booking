/*
 * This source file was generated by the Gradle 'init' task
 */
package org.BookTicket;

import org.BookTicket.Entities.Train;
import org.BookTicket.Entities.User;
import org.BookTicket.Services.UserBookingService;
import org.BookTicket.util.UserServiceUtil;

import java.io.IOException;
import java.util.*;

public class App {

    public static void main(String[] args) {
        try {
            new App().runApp();
        } catch (Exception e) {
            System.out.println("⛔ App crashed with: " + e.getClass().getSimpleName() + " - " + e.getMessage());
            e.printStackTrace();
        }
    }

    public void runApp() {
        System.out.println("Running Ticket Booking System");

        Scanner sc = new Scanner(System.in);
        int option = 0;
        long start = System.currentTimeMillis();
        System.out.println("App Started");

        UserBookingService userBookingService;

        System.out.println("Loading Data took: " + (System.currentTimeMillis() - start) + "ms");

        try {
            userBookingService = new UserBookingService();
        } catch (IOException ex) {
            System.out.println("There seems to be an error");
            ex.printStackTrace();
            return;
        }

        Train trainSelectedForBooking = null;

        while (option != 7) {
            System.out.println("\nChoose Option");
            System.out.println("1: Sign up");
            System.out.println("2: Login");
            System.out.println("3: Fetch Bookings");
            System.out.println("4: Search Trains");
            System.out.println("5: Book a Seat");
            System.out.println("6: Cancel my booking");
            System.out.println("7: Exit");

            String input = sc.nextLine().trim();
            if (input.isEmpty()) {
                System.out.println("Input cannot be empty. Please enter again.");
                continue;
            }

            try {
                option = Integer.parseInt(input);
            } catch (NumberFormatException ex) {
                System.out.println("Invalid Option. Please choose 1-7.");
                continue;
            }

            switch (option) {
                case 1:
                    System.out.print("Enter username to sign up: ");
                    String signUpName = sc.nextLine();
                    System.out.print("Enter password: ");
                    String signUpPassword = sc.nextLine();

                    User userToSignUp = new User(
                            signUpName,
                            UUID.randomUUID().toString(),
                            signUpPassword,
                            UserServiceUtil.hashPassword(signUpPassword),
                            new ArrayList<>()
                    );
                    boolean success=userBookingService.userSignUp(userToSignUp);
                    System.out.println(success? "Signup successful":"Signup Failed");
                    break;

                case 2:
                    System.out.print("Enter username to login: ");
                    String loginName = sc.nextLine();
                    System.out.print("Enter password: ");
                    String loginPassword = sc.nextLine();

                    User loginAttempt = new User(
                            loginName,
                            "",
                            loginPassword,
                            "",
                            new ArrayList<>()
                    );
                    boolean success1=userBookingService.userLogin(loginAttempt);
                    if(success1){
                        System.out.println("Login successful.");
                    }
                    else{
                        System.out.println("Login Failed.Check credentials again.");
                    }
                    break;

                case 3:
                    if (!userBookingService.isUserLoggedIn()) {
                        System.out.println("Please log in first.");
                        break;
                    }
                    System.out.println("Fetching your bookings...");
                    userBookingService.fetchBooking();
                    break;

                case 4:
                    System.out.print("Enter source station: ");
                    String source = sc.nextLine();
                    System.out.print("Enter destination station: ");
                    String destination = sc.nextLine();

                    List<Train> trains = userBookingService.getTrains(source, destination);

                    if (trains.isEmpty()) {
                        System.out.println("No trains found for this route.");
                        break;
                    }

                    for (int i = 0; i < trains.size(); i++) {
                        Train t = trains.get(i);
                        System.out.println((i + 1) + ". Train ID: " + t.getTrainId());
                        for (Map.Entry<String, String> entry : t.getStationsTime().entrySet()) {
                            System.out.println("   Station: " + entry.getKey() + " | Time: " + entry.getValue());
                        }
                    }

                    System.out.print("Select a train by number (1 - " + trains.size() + "): ");
                    try {
                        int trainIndex = Integer.parseInt(sc.nextLine());
                        if (trainIndex >= 1 && trainIndex <= trains.size()) {
                            trainSelectedForBooking = trains.get(trainIndex - 1);
                        } else {
                            System.out.println("Invalid Train selection.");
                        }
                    } catch (NumberFormatException ex) {
                        System.out.println("Invalid input.");
                    }
                    break;

                case 5:
                    if (trainSelectedForBooking == null) {
                        System.out.println("No train selected. Search and select a train first.");
                        break;
                    }

                    System.out.println("Available seats:");
                    List<List<Integer>> seats = userBookingService.fetchSeats(trainSelectedForBooking);
                    for (int i = 0; i < seats.size(); i++) {
                        System.out.print("Row " + i + ": ");
                        for (Integer seat : seats.get(i)) {
                            System.out.print(seat + " ");
                        }
                        System.out.println();
                    }

                    try {
                        System.out.print("Enter row number: ");
                        int row = Integer.parseInt(sc.nextLine());
                        System.out.print("Enter column number: ");
                        int column = Integer.parseInt(sc.nextLine());

                        System.out.println("Booking your seat...");
                        boolean booked = userBookingService.bookTrainSeat(trainSelectedForBooking, row, column);

                        if (booked) {
                            System.out.println("✅ Booking successful! Have a safe journey.");
                        } else {
                            System.out.println("❌ Seat already booked. Try another.");
                        }
                    } catch (Exception ex) {
                        System.out.println("Invalid seat input.");
                    }
                    break;

                case 6:
                    try {
                        userBookingService.cancelBooking();
                    } catch (IOException ex) {
                        System.out.println("Could not cancel ticket due to internal error.");
                    }
                    break;

                case 7:
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid option.");
                    break;
            }
        }

        sc.close();
    }
}
